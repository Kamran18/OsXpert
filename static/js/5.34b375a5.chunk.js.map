{"version":3,"sources":["processScheduling/pageComponents/form.js","processScheduling/pageComponents/output.js","processScheduling/algorithms/fcfs.js","processScheduling/algorithms/sjf.js","processScheduling/algorithms/sjf_prem.js","processScheduling/algorithms/priority.js","processScheduling/algorithms/priority_prem.js","processScheduling/algorithms/roundRobin.js","processScheduling/page.js"],"names":["useStyles","makeStyles","theme","paper","boxShadow","border","padding","marginTop","marginBottom","transition","root","margin","spacing","inputs","minWidth","gridItem","textAlign","btn_container","display","flexWrap","justifyContent","width","btns","SimpleSelect","getDataFromAlgo","classes","React","useState","algo","setAlgo","entries","error","burst_time","setBurstTime","arrival_time","setArrivalTime","priorities","setPriorities","quanta","setQuanta","handleChangeField","event","console","log","target","value","id","clearEntries","Paper","className","Grid","container","justify","item","xs","Typography","variant","noValidate","autoComplete","onSubmit","preventDefault","FormControl","style","InputLabel","Select","labelId","onChange","size","map","MenuItem","TextField","label","multiline","rowsMax","div","initial","opacity","animate","duration","type","Number","InputLabelProps","shrink","paddingLeft","Button","onClick","color","disabled","section","createMuiTheme","overrides","MuiTableCell","DenseTable","algoData","table_head","y","Divider","error_message","algorithm","priority","TableContainer","ThemeProvider","total_processes","Table","table","aria-label","TableHead","backgroundColor","TableRow","title","TableCell","align","fontWeight","TableBody","table_data","row","hover","component","scope","String","fromCharCode","entry","avg","num","gruntData","index","process","start","end","outputCompatibleFCFSData","started","completed","processes","time","nProcess","length","i","push","sort","forEach","arrive","burst","fcfsAlgo","turnaround_time","waiting_time","Math","round","EPSILON","outputCompatibleSJFData","Array","fill","pos","processCompleted","a","b","min","sjf_premAlgo","lastProcess","outputCompatiblePriorityData","max","priorityAlgo","priority_premAlgo","outputCompatibleRRData","Q","shift","rr","flexGrow","minHeight","ProcessScheduling","setstate","md","split","x","getNumList","arrival_list","burst_list","priority_list","A","B","P","nA","nB","nP","isInteger","checkError","sjfAlgo","round_robinAlgo"],"mappings":"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","file":"static/js/5.34b375a5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles, InputLabel ,MenuItem ,FormControl ,Select ,TextField \r\n  ,Button ,Paper ,Grid ,Typography} from '@material-ui/core';\r\nimport { motion } from \"framer-motion\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  //paper\r\n  paper : {\r\n    boxShadow:'none',\r\n    border: '1px solid #e0e0e0',\r\n    padding: '10px 40px',\r\n    marginTop: '30px',\r\n    marginBottom: '30px',\r\n    transition: 'box-shadow 200ms cubic-bezier(0, 0, 0.1, 0.46)',\r\n    '&:hover':{\r\n        boxShadow: '0 1px 2px 0 rgba(60,64,67,0.302), 0 2px 6px 2px rgba(60,64,67,0.149)',\r\n      }\r\n  },\r\n  //form\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  //inputs\r\n  inputs: {\r\n    minWidth: '100%',\r\n  },\r\n  gridItem: {\r\n    textAlign: 'center'\r\n  },\r\n  btn_container:{\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-between',\r\n    width: '100%',\r\n  },\r\n  btns: {\r\n    minWidth: 100,\r\n    marginBottom: '8px',\r\n  },\r\n}));\r\n\r\nexport default function SimpleSelect({getDataFromAlgo}) {\r\n  const classes = useStyles();\r\n\r\n  const schAlgos = ['First come first served', 'Shortest Job First',\r\n                    'Shortest remaining time first', 'Priority',\r\n                    'Priority (preemptive)', 'Round robin']\r\n\r\n  const [algo, setAlgo] = React.useState('');   //algo\r\n  const [burst_time, setBurstTime] = React.useState({entries:'',error:false});  //no. of frames\r\n  const [arrival_time, setArrivalTime] = React.useState({entries:'',error:false}); //ref. string\r\n  const [priorities, setPriorities] = React.useState({entries:'',error:false});  //no. of frames\r\n  const [quanta, setQuanta] = React.useState('');  //no. of frames\r\n\r\n  const handleChangeAlgo = (event) => {\r\n    setAlgo(event.target.value);\r\n    console.log(event.target.value);\r\n  };\r\n\r\n  const handleChangeQuanta = (event) => {\r\n    setQuanta(Number(event.target.value));\r\n    console.log(event.target.value);\r\n  };\r\n\r\n  const handleChangeField= (event) => {\r\n    console.log(event.target.value);\r\n    switch(event.target.id){\r\n      case \"Arrival times\":\r\n        setArrivalTime({\r\n          entries:event.target.value,\r\n          error:false\r\n        });\r\n        break;\r\n      case \"Burst times\":\r\n        setBurstTime({\r\n          entries:event.target.value,\r\n          error:false\r\n        });\r\n        break;\r\n      case \"Priorities\":\r\n        setPriorities({\r\n          entries:event.target.value,\r\n          error:false\r\n        });\r\n        break;\r\n      default:\r\n        console.log('processScheduling/form/handleChengeFiels')\r\n    }\r\n  };\r\n\r\n  const clearEntries = () => {\r\n    setAlgo('');\r\n    setQuanta('')\r\n    setBurstTime({ entries:'', error:false});\r\n    setArrivalTime({ entries:'', error:false});\r\n    setPriorities({ entries:'', error:false});\r\n  }\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    getDataFromAlgo(algo, arrival_time.entries,\r\n      burst_time.entries, priorities.entries, quanta);\r\n    clearEntries();\r\n    console.log('Submited successfully');\r\n  }\r\n\r\n  return (\r\n      <Paper className={classes.paper}>\r\n        <Grid container justify='center'>\r\n\r\n          <Grid item xs={12} className={classes.gridItem}>\r\n              <Typography variant='h5'>\r\n                Process Scheduling\r\n              </Typography>\r\n          </Grid>    \r\n\r\n          <Grid item xs={12} className={classes.gridItem}>\r\n            <form className={classes.root} noValidate\r\n             autoComplete=\"off\" onSubmit={handleSubmit}>\r\n\r\n              <Grid item xs={12} className={classes.gridItem}>\r\n                  <FormControl className={classes.inputs} style={{margin:'8px'}}>\r\n                      <InputLabel id=\"demo-simple-select-label\">Algorithm</InputLabel>\r\n                      <Select\r\n                      labelId=\"demo-simple-select-label\"\r\n                      id=\"demo-simple-select\"\r\n                      value={algo}\r\n                      onChange={handleChangeAlgo}\r\n                      size='small'\r\n                      >\r\n                      { schAlgos.map(algo =>\r\n                        <MenuItem value={algo} key={algo}>\r\n                          {algo}\r\n                        </MenuItem>\r\n                      )}\r\n                      </Select>\r\n                  </FormControl>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} className={classes.gridItem}>\r\n                  <TextField\r\n                  className={classes.inputs}\r\n                  id=\"Arrival times\"\r\n                  label=\"Arrival times\"\r\n                  multiline\r\n                  rowsMax={4}\r\n                  value={arrival_time.entries}\r\n                  error={arrival_time.error}\r\n                  onChange={handleChangeField}\r\n                  size='small'\r\n                  />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} className={classes.gridItem}>\r\n                  <TextField\r\n                  className={classes.inputs}\r\n                  id=\"Burst times\"\r\n                  label=\"Burst times\"\r\n                  multiline\r\n                  rowsMax={4}\r\n                  value={burst_time.entries}\r\n                  error={arrival_time.error}\r\n                  onChange={handleChangeField}\r\n                  size='small'\r\n                  />\r\n              </Grid>\r\n\r\n              {algo==='Priority'||algo==='Priority (preemptive)'?\r\n                <Grid item xs={12} className={classes.gridItem}>\r\n                  <motion.div\r\n                    initial={{opacity : 0}}\r\n                    animate={{ opacity: 1}}\r\n                    transition={{ duration: 0.8 }}>\r\n                    <TextField\r\n                    className={classes.inputs}\r\n                    id=\"Priorities\"\r\n                    label=\"Priorities\"\r\n                    multiline\r\n                    rowsMax={4}\r\n                    value={priorities.entries}\r\n                    error={arrival_time.error}\r\n                    onChange={handleChangeField}\r\n                    size='small'\r\n                    />\r\n                  </motion.div>\r\n                </Grid>:''}\r\n              \r\n              { algo === 'Ronud robin' ?\r\n                <Grid item xs={12} className={classes.gridItem}>\r\n                  <motion.div\r\n                    initial={{opacity : 0}}\r\n                    animate={{ opacity: 1}}\r\n                    transition={{ duration: 1 }}>\r\n                    <TextField\r\n                    className={classes.inputs}\r\n                    id=\"Time Quanta\"\r\n                    label=\"Time Quanta\"\r\n                    type=\"number\"\r\n                    onChange={handleChangeQuanta}\r\n                    value={quanta}\r\n                    size='small'\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    />\r\n                  </motion.div>\r\n              </Grid>:''}\r\n\r\n              <br/>\r\n\r\n              <Grid item xs={12} className={classes.btn_container} style={{paddingLeft: '9px'}}>\r\n                  <Button \r\n                    onClick = {clearEntries}\r\n                    className={classes.btns}\r\n                    variant=\"outlined\"\r\n                    color='secondary'\r\n                    size='small'>\r\n                      Clear\r\n                  </Button>\r\n                  <Button type='submit' \r\n                    disabled={(!algo || !arrival_time.entries || \r\n                      !burst_time.entries || arrival_time.error ||\r\n                      burst_time.error || priorities.error ||\r\n                      (algo === 'Ronud robin'?!quanta:\r\n                      ((algo==='Priority'||\r\n                      algo==='Priority (preemptive)')?\r\n                      !priorities.entries:false)))}\r\n                    className={classes.btns}\r\n                    color='primary'\r\n                    variant=\"outlined\"\r\n                    size='small'>\r\n                      Submit\r\n                  </Button>\r\n              </Grid>\r\n\r\n            </form>\r\n          </Grid>\r\n        </Grid>\r\n    </Paper>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, ThemeProvider, createMuiTheme, Table, Typography,\r\n  TableBody, TableCell, TableContainer, TableHead, TableRow, Paper,\r\n  Divider} from '@material-ui/core';\r\nimport { motion } from \"framer-motion\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: { \r\n    padding: theme.spacing(3),\r\n    boxShadow:'none',\r\n  },\r\n  section: { \r\n    margin: theme.spacing(2) ,\r\n  },\r\n  gridItem: {\r\n    marginBottom: theme.spacing(2),\r\n    textAlign: 'center'\r\n  }\r\n}));\r\n\r\nconst theme = createMuiTheme({\r\n  overrides: {\r\n      MuiTableCell: {\r\n        root: {\r\n          border: '1px dotted #e0e0e0',\r\n        }\r\n      }\r\n  },\r\n});\r\n\r\nexport default function DenseTable({algoData}) {\r\n  const classes = useStyles();\r\n\r\n  const table_head = ['Process', 'Arrival', 'Burst', 'Priority', 'Started', 'Completed', 'Turnaround', 'Waiting'];\r\n\r\n  const getTable = () => (\r\n    <Table className={classes.table} aria-label=\"a dense table\">\r\n              {/* Table Head/Refrence string */}\r\n              <TableHead style={{backgroundColor: '#bbdefb'}}>\r\n                <TableRow >\r\n                  {table_head.map((title,id) =>\r\n                  <TableCell align='center' key={id} style={{fontWeight: 'bold', minWidth:'75px'}}>\r\n                    {title}\r\n                  </TableCell>)}\r\n                </TableRow>\r\n              </TableHead>\r\n\r\n              <TableBody>\r\n                {/* Process rows */}\r\n                {algoData.table_data.map((row, id) => (\r\n                  <TableRow key={id} hover={true}>\r\n                    <TableCell component=\"th\" scope=\"row\" align='center'>\r\n                      {String.fromCharCode(65+id)}\r\n                    </TableCell> \r\n                    {row.map((entry, id) => (\r\n                      <TableCell component=\"th\" scope=\"row\" align='center' key={entry+''+id}>\r\n                        {entry}\r\n                      </TableCell> \r\n                    ))}\r\n                  </TableRow>\r\n                ))}\r\n\r\n                {/* Average row */}\r\n                <TableRow >\r\n                  <TableCell component=\"th\" scope=\"row\" align='center' style={{fontWeight: 'bold'}}>\r\n                    Average\r\n                  </TableCell>\r\n                  {algoData.avg.map( (num, id) => (\r\n                    <TableCell component=\"th\" scope=\"row\" align='center' key={id}>\r\n                      {num === -1 ? '-': <b>{num}</b>}\r\n                    </TableCell> \r\n                  ))}\r\n                </TableRow>\r\n              </TableBody>\r\n            </Table>\r\n    )\r\n\r\n  return (\r\n    <Paper className={classes.paper}>\r\n      {console.log(algoData)}\r\n      <div className={classes.gridItem}>\r\n            <Typography variant='h4'> Process Scheduling Output </Typography>\r\n      </div>\r\n\r\n      <div className={classes.section}>\r\n        <motion.div\r\n          initial={{y : -5}}\r\n          animate={{y : 0}}\r\n          transition={{ duration: 0.6 }}>\r\n           <Typography variant='h5'> Input Summary </Typography>\r\n        </motion.div>\r\n        <br/><Divider />\r\n        <div className={classes.section}>\r\n          {\r\n            algoData.error_message === 1 ?\r\n              <Typography variant='h5' style={{color:'tomato'}}>\r\n                  Incorrect input check enter data and try again\r\n              </Typography> : ''\r\n          }\r\n          {algoData.algorithm !== '' ?\r\n            <motion.div\r\n              initial={{opacity : 0}}\r\n              animate={{ opacity: 1}}\r\n              transition={{ duration: 0.8 }}>\r\n              <Typography variant='subtitle1'>\r\n                Algorithm :: <i>{algoData.algorithm}</i>\r\n              </Typography>\r\n              <Typography variant='subtitle1'>\r\n                Arrival times :: <i>{algoData.arrival_time}</i>\r\n              </Typography>\r\n              <Typography variant='subtitle1'>\r\n                Burst times :: <i>{algoData.burst_time}</i>\r\n              </Typography>\r\n              {algoData.priority?<Typography variant='subtitle1'>\r\n                Priority :: <i>{algoData.priority}</i>\r\n              </Typography>:''}\r\n              {algoData.quanta?<Typography variant='subtitle1'>\r\n                quanta :: <i>{algoData.quanta}</i>\r\n              </Typography>:''}\r\n            </motion.div>\r\n          : ''}\r\n        </div>\r\n      </div>\r\n      <br />\r\n\r\n      <div className={classes.section}>\r\n      <motion.div\r\n          initial={{y : -10}}\r\n          animate={{y : 0}}\r\n          transition={{ duration: 0.6 }}>\r\n           <Typography variant='h5'> Solution visualization </Typography>\r\n        </motion.div>\r\n        <br/> <Divider /> <br/>\r\n        {algoData.algorithm !== '' ?\r\n          <motion.div\r\n          initial={{opacity : 0}}\r\n          animate={{ opacity: 1}}\r\n          transition={{ duration: 0.8 }}>\r\n            <TableContainer>\r\n              <ThemeProvider theme={theme}>\r\n                {algoData.total_processes >= 1 ? \r\n                  getTable(): 'Your solution will display here'}\r\n              </ThemeProvider>\r\n            </TableContainer>\r\n          </motion.div>\r\n        : ''}\r\n        <br/>\r\n      </div>\r\n\r\n        <div className={classes.section}>\r\n          <motion.div\r\n            initial={{y : -15}}\r\n            animate={{y : 0}}\r\n            transition={{ duration: 0.6 }}>\r\n            <Typography variant='h5'> Details </Typography>\r\n          </motion.div>\r\n          <br/><Divider />\r\n          {algoData.algorithm !== '' ?\r\n              <div className={classes.section}>\r\n                {\r\n                    algoData.gruntData.map(([process,start,end], index) => (\r\n                      process !== -1 ?\r\n                      <Typography variant='subtitle1' key={index}>\r\n                        Process <b>{String.fromCharCode(65+process)}</b> runs from <b>{start}</b> to <b>{end}</b>\r\n                      </Typography> :\r\n                      <Typography variant='subtitle1' key={index}>\r\n                        <b>No Process</b> runs from <b>{start}</b> to <b>{end}</b>\r\n                      </Typography>\r\n                      ))\r\n                }\r\n              </div>\r\n          : ''}\r\n        </div>\r\n    </Paper>\r\n  );\r\n}\r\n","// return started, completed & gruntData\r\nfunction fcfsAlgo(arrival_time, burst_time){\r\n\r\n    let started = [],\r\n        completed = [],\r\n        gruntData = [],\r\n        processes = [],\r\n        time = 0\r\n    const nProcess = arrival_time.length;\r\n\r\n    for(let i=0; i<nProcess; i++)\r\n        processes.push([arrival_time[i], burst_time[i]]);\r\n    processes.sort()\r\n    for(let i=0; i<nProcess; i++)\r\n        processes[i] = [...processes[i], i]\r\n    \r\n    processes.forEach(([arrive, burst, process]) => {\r\n        if(arrive > time){\r\n            gruntData.push([-1, time, arrive]) //No Process\r\n            time = arrive;\r\n        }\r\n        started.push(time)\r\n        time += burst\r\n        completed.push(time)\r\n        gruntData.push([process, time-burst, time])\r\n    });\r\n    \r\n    return [started, completed, gruntData, processes]\r\n}\r\n\r\nconst outputCompatibleFCFSData = (arrival_time, burst_time) => {\r\n    const [started, completed, gruntData, processes] = fcfsAlgo(arrival_time, burst_time);\r\n    const avg = [-1, -1, -1, -1, -1, 0, 0],\r\n    table_data = [],\r\n    turnaround_time = [],\r\n    waiting_time = [],\r\n    nProcess = arrival_time.length;\r\n\r\n    for(let i=0; i<nProcess; i++){\r\n        turnaround_time.push(completed[i]-processes[i][0])\r\n        avg[5] += turnaround_time[turnaround_time.length-1];\r\n        waiting_time.push(turnaround_time[turnaround_time.length-1]-processes[i][1])\r\n        avg[6] += waiting_time[waiting_time.length-1];\r\n\r\n        table_data.push([processes[i][0], processes[i][1], '-', started[i],\r\n                         completed[i], turnaround_time[i], waiting_time[i]]);\r\n    }\r\n    avg[5] /= nProcess;\r\n    avg[5] = Math.round((avg[5]+Number.EPSILON)*100)/100;\r\n    avg[6] /= nProcess;\r\n    avg[6] = Math.round((avg[6]+Number.EPSILON)*100)/100;\r\n\r\n    return [table_data , avg, gruntData]\r\n}\r\n\r\nexport default outputCompatibleFCFSData\r\n\r\n// [started, completed, gruntData] = fcfs();\r\n// console.log(started, completed, gruntData)","// return started, completed & gruntData\r\n\r\nconst sjf_premAlgo = (arrival_time, burst_time) => {\r\n\r\n    const nProcess = arrival_time.length;\r\n    let started = [],\r\n        completed = Array(nProcess).fill(-1),\r\n        gruntData = [],\r\n        processes = [],\r\n        pos = 0,\r\n        processCompleted = 0;\r\n        \r\n        for(let i=0; i<nProcess; i++)\r\n            processes.push([arrival_time[i], burst_time[i]]);\r\n        processes.sort((a, b)=> {\r\n            if(a[0]<b[0] || (a[0]===b[0] && a[1]<=b[1]))\r\n                return -1\r\n            else\r\n                return 1\r\n        });\r\n        for(let i=0; i<nProcess; i++)\r\n            processes[i] = [...processes[i], i]\r\n        \r\n        let time = processes[0][0];\r\n        if(time !== 0)\r\n            gruntData.push([-1, 0, time]);\r\n\r\n    //Logic \r\n    while(processCompleted !== nProcess){\r\n        //finding the max index we can search at time t\r\n        while(pos<nProcess-1 && processes[pos+1][0] <= time){\r\n            pos++;\r\n        }\r\n\r\n        //points to the first element which isn't completed \r\n        let min = -1;\r\n        // finding the first such element\r\n        for(let i=0; i<=pos; i++){\r\n            if(completed[i] === -1){\r\n                min = i;\r\n                break;\r\n            }\r\n        }\r\n        // when all elements are completed at that time\r\n        if(min === -1){\r\n            gruntData.push([min, time, processes[pos+1][0]]);\r\n            time = processes[pos+1][0]; \r\n            continue;\r\n        }\r\n        // finding min burst time nonCompleted element\r\n        for(let i=min; i<=pos; i++){\r\n            if((processes[i][1] < processes[min][1]) && (completed[i] === -1))\r\n                min = i;\r\n        }\r\n        \r\n        started[min] = time;\r\n        time += processes[min][1];\r\n        completed[min] = time;\r\n        gruntData.push([min, time-processes[min][1], time]);\r\n        processCompleted++;\r\n    }\r\n    //Logic Ends\r\n\r\n    return [started, completed, gruntData, processes]\r\n}\r\n\r\nconst outputCompatibleSJFData = (arrival_time, burst_time) => {\r\n    const [started, completed, gruntData, processes] = sjf_premAlgo(arrival_time, burst_time);\r\n    const avg = [-1, -1, -1, -1, -1, 0, 0],\r\n    table_data = [],\r\n    turnaround_time = [],\r\n    waiting_time = [],\r\n    nProcess = arrival_time.length;\r\n\r\n    for(let i=0; i<nProcess; i++){\r\n        turnaround_time.push(completed[i]-processes[i][0])\r\n        avg[5] += turnaround_time[turnaround_time.length-1];\r\n        waiting_time.push(turnaround_time[turnaround_time.length-1]-processes[i][1])\r\n        avg[6] += waiting_time[waiting_time.length-1];\r\n\r\n        table_data.push([processes[i][0], processes[i][1], '-', started[i],\r\n                         completed[i], turnaround_time[i], waiting_time[i]]);\r\n    }\r\n    avg[5] /= nProcess;\r\n    avg[5] = Math.round((avg[5]+Number.EPSILON)*100)/100;\r\n    avg[6] /= nProcess;\r\n    avg[6] = Math.round((avg[6]+Number.EPSILON)*100)/100;\r\n\r\n    return [table_data , avg, gruntData]\r\n}\r\n\r\nexport default outputCompatibleSJFData","// return started, completed & gruntData\r\n\r\nconst sjf_premAlgo = (arrival_time, burst_time) => {\r\n\r\n    const nProcess = arrival_time.length;\r\n    let started = Array(nProcess).fill(-1),\r\n        completed = Array(nProcess).fill(-1),\r\n        gruntData = [],\r\n        processes = [],\r\n        pos = 0,\r\n        processCompleted = 0,\r\n        lastProcess = -1;\r\n        \r\n    for(let i=0; i<nProcess; i++)\r\n        processes.push([arrival_time[i], burst_time[i]]);\r\n    processes.sort((a, b)=> {\r\n        if(a[0]<b[0] || (a[0]===b[0] && a[1]<=b[1]))\r\n            return -1\r\n        else\r\n            return 1\r\n    });\r\n    for(let i=0; i<nProcess; i++)\r\n        processes[i] = [...processes[i], i]\r\n    \r\n    let time = processes[0][0];\r\n    if(time !== 0)\r\n        gruntData.push([-1, 0, time]);\r\n\r\n    //Logic \r\n    while(processCompleted !== nProcess){\r\n        //finding the max index we can search at time t\r\n        while(pos<nProcess-1 && processes[pos+1][0] <= time){\r\n            pos++;\r\n        }\r\n\r\n        //points to the first element which isn't completed \r\n        let min = -1;\r\n        // finding the first such element\r\n        for(let i=0; i<=pos; i++){\r\n            if(completed[i] === -1){\r\n                min = i;\r\n                break;\r\n            }\r\n        }\r\n        // when all elements are completed at that time\r\n        // we can use pos+1 as there processCompleted != nProcess\r\n        // and so there will be atleast nonCompleted process \r\n        if(min === -1){\r\n            gruntData.push([min, time, processes[pos+1][0]]);\r\n            time = processes[pos+1][0]; \r\n            continue;\r\n        }\r\n        // finding min burst time nonCompleted element\r\n        for(let i=min; i<=pos; i++){\r\n            if((processes[i][1] < processes[min][1] && completed[i] === -1)||\r\n                (processes[i][1] === processes[min][1] && i === lastProcess))\r\n                min = i;\r\n        }\r\n        \r\n        if(started[min] === -1)\r\n            started[min] = time;\r\n        processes[min][1]--;\r\n        time++;\r\n        if(processes[min][1] === 0){\r\n            completed[min] = time;\r\n            processCompleted++;\r\n        }\r\n        if(lastProcess !== min)\r\n            gruntData.push([min, time-1, time]);\r\n        else\r\n            gruntData[gruntData.length-1][2] = time;\r\n        lastProcess = min;\r\n    }\r\n    //Logic Ends\r\n\r\n    return [started, completed, gruntData, processes]\r\n}\r\n\r\nconst outputCompatibleSJFData = (arrival_time, burst_time) => {\r\n    const [started, completed, gruntData, processes] = sjf_premAlgo(arrival_time, burst_time);\r\n    const avg = [-1, -1, -1, -1, -1, 0, 0],\r\n    table_data = [],\r\n    turnaround_time = [],\r\n    waiting_time = [],\r\n    nProcess = arrival_time.length;\r\n\r\n    for(let i=0; i<nProcess; i++){\r\n        turnaround_time.push(completed[i]-processes[i][0])\r\n        avg[5] += turnaround_time[turnaround_time.length-1];\r\n        waiting_time.push(turnaround_time[turnaround_time.length-1]-processes[i][1])\r\n        avg[6] += waiting_time[waiting_time.length-1];\r\n\r\n        table_data.push([processes[i][0], processes[i][1], '-', started[i],\r\n                         completed[i], turnaround_time[i], waiting_time[i]]);\r\n    }\r\n    avg[5] /= nProcess;\r\n    avg[5] = Math.round((avg[5]+Number.EPSILON)*100)/100;\r\n    avg[6] /= nProcess;\r\n    avg[6] = Math.round((avg[6]+Number.EPSILON)*100)/100;\r\n\r\n    return [table_data , avg, gruntData]\r\n}\r\n\r\nexport default outputCompatibleSJFData","const priorityAlgo = (arrival_time, burst_time, priority) => {\r\n\r\n    const nProcess = arrival_time.length;\r\n    let started = [],\r\n        completed = Array(nProcess).fill(-1),\r\n        gruntData = [],\r\n        processes = [],\r\n        pos = 0,\r\n        processCompleted = 0;\r\n        \r\n        for(let i=0; i<nProcess; i++)\r\n            processes.push([arrival_time[i], priority[i], burst_time[i]]);\r\n        processes.sort((a, b)=> {\r\n            if(a[0]<b[0] || (a[0]===b[0] && a[1]>=b[1]) || (a[0]===b[0] && a[1]===b[1] && a[2]<=b[2]))\r\n                return -1\r\n            else\r\n                return 1\r\n        });\r\n        for(let i=0; i<nProcess; i++)\r\n            processes[i] = [...processes[i], i]\r\n        console.log(processes)\r\n\r\n        let time = processes[0][0];\r\n        if(time !== 0)\r\n            gruntData.push([-1, 0, time]);\r\n\r\n    //Logic \r\n    while(processCompleted !== nProcess){\r\n        while(pos<nProcess-1 && processes[pos+1][0] <= time){\r\n            pos++;\r\n        }\r\n        console.log(pos);\r\n        let max = -1;\r\n        for(let i=0; i<=pos; i++){\r\n            if(completed[i] === -1){\r\n                max = i;\r\n                break;\r\n            }\r\n        }\r\n        if(max === -1){\r\n            gruntData.push([max, time, processes[pos+1][0]]);\r\n            time = processes[pos+1][0]; \r\n            continue;\r\n        }\r\n        for(let i=max; i<=pos; i++){\r\n            if((processes[i][1] > processes[max][1]) && (completed[i] === -1))\r\n                max = i;\r\n        }\r\n        started[max] = time;\r\n        time += processes[max][2];\r\n        completed[max] = time;\r\n        gruntData.push([max, time-processes[max][2], time]);\r\n        processCompleted++;\r\n    }\r\n    //Logic Ends\r\n\r\n    return [started, completed, gruntData, processes]\r\n}\r\n\r\nconst outputCompatiblePriorityData = (arrival_time, burst_time, priority) => {\r\n    const [started, completed, gruntData, processes] = priorityAlgo(arrival_time, burst_time, priority);\r\n    const avg = [-1, -1, -1, -1, -1, 0, 0],\r\n    table_data = [],\r\n    turnaround_time = [],\r\n    waiting_time = [],\r\n    nProcess = arrival_time.length;\r\n\r\n    for(let i=0; i<nProcess; i++){\r\n        turnaround_time.push(completed[i]-processes[i][0])\r\n        avg[5] += turnaround_time[turnaround_time.length-1];\r\n        waiting_time.push(turnaround_time[turnaround_time.length-1]-processes[i][2])\r\n        avg[6] += waiting_time[waiting_time.length-1];\r\n\r\n        table_data.push([processes[i][0], processes[i][2], processes[i][1], started[i],\r\n                         completed[i], turnaround_time[i], waiting_time[i]]);\r\n    }\r\n    avg[5] /= nProcess;\r\n    avg[5] = Math.round((avg[5]+Number.EPSILON)*100)/100;\r\n    avg[6] /= nProcess;\r\n    avg[6] = Math.round((avg[6]+Number.EPSILON)*100)/100;\r\n\r\n    return [table_data , avg, gruntData]\r\n}\r\n\r\nexport default outputCompatiblePriorityData","const priority_premAlgo = (arrival_time, burst_time, priority) => {\r\n\r\n    const nProcess = arrival_time.length;\r\n    let started = Array(nProcess).fill(-1),\r\n        completed = Array(nProcess).fill(-1),\r\n        gruntData = [],\r\n        processes = [],\r\n        pos = 0,\r\n        processCompleted = 0,\r\n        lastProcess = -1;\r\n        \r\n        for(let i=0; i<nProcess; i++)\r\n            processes.push([arrival_time[i], priority[i], burst_time[i]]);\r\n        processes.sort((a, b)=> {\r\n            if(a[0]<b[0] || (a[0]===b[0] && a[1]>=b[1]) || (a[0]===b[0] && a[1]===b[1] && a[2]<=b[2]))\r\n                return -1\r\n            else\r\n                return 1\r\n        });\r\n        for(let i=0; i<nProcess; i++)\r\n            processes[i] = [...processes[i], i]\r\n        console.log(processes)\r\n\r\n        let time = processes[0][0];\r\n        if(time !== 0)\r\n            gruntData.push([-1, 0, time]);\r\n\r\n    //Logic \r\n    while(processCompleted !== nProcess){\r\n        while(pos<nProcess-1 && processes[pos+1][0] <= time){\r\n            pos++;\r\n        }\r\n\r\n        let max = -1;\r\n        for(let i=0; i<=pos; i++){\r\n            if(completed[i] === -1){\r\n                max = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(max === -1){\r\n            gruntData.push([max, time, processes[pos+1][0]]);\r\n            time = processes[pos+1][0]; \r\n            continue;\r\n        }\r\n        \r\n        for(let i=max; i<=pos; i++){\r\n            if((processes[i][1] > processes[max][1] && completed[i] === -1)||\r\n            (processes[i][1] === processes[max][1] && i === lastProcess))\r\n                max = i;\r\n        }\r\n\r\n        if(started[max] === -1)\r\n            started[max] = time;\r\n        processes[max][2]--;\r\n        time++;\r\n        if(processes[max][2] === 0){\r\n            completed[max] = time;\r\n            processCompleted++;\r\n        }\r\n        if(lastProcess !== max)\r\n            gruntData.push([max, time-1, time]);\r\n        else\r\n            gruntData[gruntData.length-1][2] = time;\r\n        lastProcess = max;\r\n    }\r\n    //Logic Ends\r\n\r\n    return [started, completed, gruntData, processes]\r\n}\r\n\r\nconst outputCompatiblePriorityData = (arrival_time, burst_time, priority) => {\r\n    const [started, completed, gruntData, processes] = priority_premAlgo(arrival_time, burst_time, priority);\r\n    const avg = [-1, -1, -1, -1, -1, 0, 0],\r\n    table_data = [],\r\n    turnaround_time = [],\r\n    waiting_time = [],\r\n    nProcess = arrival_time.length;\r\n\r\n    for(let i=0; i<nProcess; i++){\r\n        turnaround_time.push(completed[i]-processes[i][0])\r\n        avg[5] += turnaround_time[turnaround_time.length-1];\r\n        waiting_time.push(turnaround_time[turnaround_time.length-1]-processes[i][2])\r\n        avg[6] += waiting_time[waiting_time.length-1];\r\n\r\n        table_data.push([processes[i][0], processes[i][2], processes[i][1], started[i],\r\n                         completed[i], turnaround_time[i], waiting_time[i]]);\r\n    }\r\n    avg[5] /= nProcess;\r\n    avg[5] = Math.round((avg[5]+Number.EPSILON)*100)/100;\r\n    avg[6] /= nProcess;\r\n    avg[6] = Math.round((avg[6]+Number.EPSILON)*100)/100;\r\n\r\n    return [table_data , avg, gruntData]\r\n}\r\n\r\nexport default outputCompatiblePriorityData","// return started, completed & gruntData\r\n\r\nconst rr = (arrival_time, burst_time, quanta) => {\r\n\r\n    const nProcess = arrival_time.length;\r\n    let started = Array(nProcess),\r\n        completed = Array(nProcess),\r\n        gruntData = [],\r\n        processes = [];\r\n\r\n    for(let i=0; i<nProcess; i++)\r\n        processes.push([arrival_time[i], burst_time[i]]);\r\n    processes.sort()\r\n    for(let i=0; i<nProcess; i++)\r\n        processes[i] = [...processes[i], i]\r\n\r\n    // console.log('Test',processes)\r\n\r\n    let Q = [processes[0]],\r\n        time = processes[0][0],\r\n        lastProcess = -1,\r\n        processCompleted= 0,\r\n        pos = 1; //location pointer\r\n    \r\n    if(time !== 0)\r\n        gruntData.push([-1, 0, time])\r\n\r\n    //Logic \r\n    while(processCompleted !== nProcess){\r\n        let [arrive, burst, process] = Q.shift()\r\n\r\n        if(!started[process])\r\n            started[process] = time;\r\n\r\n        if(burst <= quanta){\r\n            time = time + burst;\r\n            if(lastProcess === process)\r\n                gruntData[gruntData.length-1][2] = time;\r\n            else\r\n                gruntData.push([process, time-burst, time])\r\n            lastProcess = process\r\n\r\n            completed[process] = time;\r\n            processCompleted++;\r\n            \r\n            while(pos < nProcess && processes[pos][0] <= time)\r\n                Q.push(processes[pos++])\r\n            \r\n            //if gap btw processes arrival is large \r\n            if(pos < nProcess && Q.length === 0){\r\n                gruntData.push([-1, time, processes[pos][0]])\r\n                Q.push(processes[pos]);\r\n                time = processes[pos++][0];\r\n            }\r\n\r\n            continue\r\n        }\r\n        // Else\r\n        time = time + quanta;\r\n        if(lastProcess === process)\r\n            gruntData[gruntData.length-1][2] = time;\r\n        else\r\n            gruntData.push([process, time-quanta, time])\r\n        lastProcess = process\r\n\r\n        while(pos < nProcess && processes[pos][0] <= time)\r\n            Q.push(processes[pos++])\r\n\r\n        Q.push([arrive, burst-quanta, process])\r\n    }\r\n    //Logic Ends\r\n    return [started, completed, gruntData, processes]\r\n}\r\n\r\n// const [started, completed, gruntData, processes] = rr([1, 2, 3], [1, 2, 3], 2)\r\n// console.log(\"DODo\",started,'\\n', completed, '\\n', gruntData)\r\n\r\nconst outputCompatibleRRData = (arrival_time, burst_time, quanta) => {\r\n    const [started, completed, gruntData, processes] = rr(arrival_time, burst_time, quanta);\r\n\r\n    const avg = [-1, -1, -1, -1, -1, 0, 0],\r\n    table_data = [],\r\n    turnaround_time = [],\r\n    waiting_time = [],\r\n    nProcess = arrival_time.length;\r\n\r\n    for(let i=0; i<nProcess; i++){\r\n        turnaround_time.push(completed[i]-processes[i][0])\r\n        avg[5] += turnaround_time[turnaround_time.length-1];\r\n        waiting_time.push(turnaround_time[turnaround_time.length-1]-processes[i][1])\r\n        avg[6] += waiting_time[waiting_time.length-1];\r\n\r\n        table_data.push([processes[i][0], processes[i][1], '-', started[i],\r\n                         completed[i], turnaround_time[i], waiting_time[i]]);\r\n    }\r\n    avg[5] /= nProcess;\r\n    avg[5] = Math.round((avg[5]+Number.EPSILON)*100)/100;\r\n    avg[6] /= nProcess;\r\n    avg[6] = Math.round((avg[6]+Number.EPSILON)*100)/100;\r\n\r\n    return [table_data , avg, gruntData]\r\n}\r\n\r\nexport default outputCompatibleRRData\r\n","import React, {useState} from 'react';\r\nimport { makeStyles, Grid } from '@material-ui/core';\r\nimport ProcessSchedulingform from './pageComponents/form'\r\nimport ProcessSchedulingOutput from './pageComponents/output'\r\nimport {fcfsAlgo, sjfAlgo, sjf_premAlgo, priorityAlgo,\r\n     priority_premAlgo, round_robinAlgo} from './algorithms/schedulingAlgos'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(2),\r\n    minHeight: '80vh',\r\n  }\r\n}));\r\n\r\nexport default function ProcessScheduling(){\r\n    const classes = useStyles();\r\n\r\n    /* table_data => array of table rows data */\r\n    //when entered data is incorrect error_data = 1 \r\n    const [algoData, setstate] = useState(\r\n        {'algorithm':'',\r\n        'arrival_time':[],\r\n        'burst_time':[],\r\n        'priority':[],\r\n        'quanta':'',\r\n        'total_processes': '',\r\n        'table_data': [],\r\n        'avg': [],\r\n        'gruntData': [],\r\n        'error_message': 0})\r\n    \r\n    const checkError = (A, B, P) => {\r\n        const nA = A.length, nB = B.length,\r\n        nP = P.length? nA: P.length\r\n        \r\n        if(nA===nB && nA===nP && nB===nP){\r\n            for(let i=0; i<nA; i++){\r\n                if(!(Number.isInteger(A[i]) && \r\n                    Number.isInteger(B[i]) && \r\n                    Number.isInteger(P[i])))\r\n                    return false\r\n                return true\r\n            }\r\n        }\r\n        else\r\n            return false\r\n    }\r\n\r\n    const getNumList = (arrival_time, burst_time, priority)=>{\r\n        arrival_time = arrival_time.split(',').map(x=>+x)\r\n        burst_time = burst_time.split(',').map(x=>+x)\r\n        priority = priority.split(',').map(x=>+x)\r\n        return [arrival_time, burst_time, priority]\r\n    }\r\n\r\n    const getDataFromAlgo=(algo, arrival_time, burst_time, priority, quanta)=>{\r\n\r\n        const [arrival_list, burst_list, priority_list] =\r\n             getNumList(arrival_time, burst_time, priority)\r\n\r\n        let table_data, avg, gruntData;\r\n        if(checkError(arrival_list, burst_list, priority_list)){\r\n            switch(algo){\r\n                case 'First come first served':\r\n                    [table_data, avg, gruntData] = \r\n                        fcfsAlgo(arrival_list, burst_list);\r\n                    break;\r\n                case 'Shortest Job First':\r\n                    [table_data, avg, gruntData] = \r\n                        sjfAlgo(arrival_list, burst_list);\r\n                    break;\r\n                case 'Shortest remaining time first':\r\n                    [table_data, avg, gruntData] = \r\n                        sjf_premAlgo(arrival_list, burst_list);\r\n                    break;\r\n                case 'Priority':\r\n                    [table_data, avg, gruntData] = \r\n                        priorityAlgo(arrival_list, burst_list, priority_list);\r\n                    break;\r\n                case 'Priority (preemptive)':\r\n                    [table_data, avg, gruntData] = \r\n                        priority_premAlgo(arrival_list, burst_list, priority_list);\r\n                    break;\r\n                case 'Ronud robin':\r\n                    [table_data, avg, gruntData] = \r\n                        round_robinAlgo(arrival_list, burst_list, quanta);\r\n                    break;\r\n                default:\r\n                    console.log('processScheduling/Page.js/algoInput-Incorrect')\r\n            }\r\n            setstate({\r\n                'algorithm':algo,\r\n                'arrival_time':arrival_time,\r\n                'burst_time':burst_time,\r\n                'priority':priority,\r\n                'quanta':quanta,\r\n                'total_processes': arrival_time.length,\r\n                'table_data': table_data,\r\n                'avg': avg,\r\n                'gruntData': gruntData,\r\n                'error_message': 0})\r\n        }\r\n        else\r\n            setstate({\r\n                'algorithm':'',\r\n                'arrival_time':[],\r\n                'burst_time':[],\r\n                'priority':[],\r\n                'quanta':'',\r\n                'total_processes': '',\r\n                'table_data': [],\r\n                'avg': [],\r\n                'gruntData': [],\r\n                'error_message': 1})\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={12} md={3}>\r\n                    <ProcessSchedulingform getDataFromAlgo={getDataFromAlgo}/>\r\n                </Grid>\r\n                <Grid item xs={12} md={9}>\r\n                    <ProcessSchedulingOutput algoData={algoData}/>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}"],"sourceRoot":""}